TODO list for Sidef

Classes:
    * Implement roles (from Perl 6) and add the `does` trait for classes
      (http://doc.perl6.org/language/objects#Roles)

Method/functions:
    * Implement the `is exported` trait for functions and classes (maybe)

New built-in classes:
    * Implement a native `Matrix` class (as `Sidef::Types::Array::Matrix`) with functionality close to that of the `Math::Matrix` Perl module.
    * Implement a native `Vector` class (as `Sidef::Types::Array::Vector`) with appropriate methods, such as: `dist`, `+`, `-`, `*`, `/`, etc...
    * Implement a native `Set` class (as `Sidef::Types::Set::Set`) with appropriate methods, such as: `contains`, `remove`, `union`, `intersect`, etc...
    * Implement a native `Bag` class (as `Sidef::Types::Set::Bag`) which would behave exactly like a multiset.

Internal:
    * Switch to subroutine `signatures` (as soon as this feature becomes stable).

Funtionality:
    * Add support for arbitrary nested for-loops as one for-in loop (same as in Julia):

        for x in (...), y in (...) {
            ...
        }

        for x in (...), y in (...), z in (...) {
            ...
        }

        Additionally, we should also be able to use the previously declared loop variables:

        for i in (1..10), j in (i..10) {
            say [i, j]
        }

Performance:
    * Add dynamic cache inside all the immutable built-in objects (except IO-related) that take only one argument (the self-object), such that calling the same method again on
      the same object, will return the previous result from cache. When the object is destroyed, the cache is also destroyed with the object itself. This requires making all built-in
      objects blessed HASH references. Currently, the String class blesses a scalar string, which do not allow any other fields inside the object to be stored. The Number class blsesses
      a REF, etc... This change would require quite a lot of work, but the performance improvements may pay off in the end.

Speculations:
    * Make all built-in objects immutable, allowing dynamic cache to be applied to all built-in objects.
    * Make all core methods (including user-defined methods) real multimethods, using Class::Multimethods.
    * Bootstrap Sidef by writing a code generator in Sidef that generates Perl code.
    * Rewrite all core libraries in Sidef.
