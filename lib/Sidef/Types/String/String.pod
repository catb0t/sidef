
=encoding utf8

=head1 NAME

Sidef::Types::String::String

=head1 DESCRIPTION

This object is ...

=head1 SYNOPSIS

var obj = String.new(...);


=head1 INHERITS

Inherits methods from:

	* Sidef::Object::Object
	* Sidef::Convert::Convert

=head1 METHODS


=head2 %

I<Obj> B<%> I<Obj> -> I<Obj>

Return the

Aliases: I<sprintf>

=cut

=head2 &

I<Obj> B<&> I<Obj> -> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<times>, I<multiply>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<append>, I<concat>

=cut

=head2 ++

I<Obj> B<++> I<Obj> -> I<Obj>

Return the

Aliases: I<inc>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<subtract>

=cut

=head2 ..

I<Obj> B<..> I<Obj> -> I<Obj>

Return the

Aliases: I<arr_to>, I<array_to>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<÷()>, I<div>, I<divide>

=cut

=head2 :

I<Obj> B<:> I<Obj> -> I<Obj>

Return the

Aliases: I<pair_with>, I<pairWith>

=cut

=head2 <

I<Obj> B<E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<lt>

=cut

=head2 <<

I<Obj> B<E<lt>E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<drop_left>, I<dropLeft>, I<shift_left>, I<shiftLeft>

=cut

=head2 <=>

I<Obj> B<E<lt>=E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<cmp>

=cut

=head2 =

I<Obj> B<=> I<Obj> -> I<Obj>

Return the

Aliases: I<==()>, I<eq>, I<is>, I<equals>

=cut

=head2 =~

I<Obj> B<=~> I<Obj> -> I<Obj>

Return the

Aliases: I<match>, I<matches>

=cut

=head2 >

I<Obj> B<E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<gt>

=cut

=head2 >>

I<Obj> B<E<gt>E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<drop_right>, I<dropRight>, I<shift_right>, I<shiftRight>

=cut

=head2 ^

I<Obj> B<^> I<Obj> -> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 ^..

I<Obj> B<^..> I<Obj> -> I<Obj>

Return the

Aliases: I<downto>, I<downTo>

=cut

=head2 apply_escapes

String.apply_escapes() -> I<Obj>

Return the

Aliases: I<applyEscapes>

=cut

=head2 arr_downto

String.arr_downto() -> I<Obj>

Return the

Aliases: I<array_downto>

=cut

=head2 basic_dump

String.basic_dump() -> I<Obj>

Return the

=cut

=head2 begins_with

String.begins_with() -> I<Obj>

Return the

Aliases: I<beginsWith>, I<starts_with>, I<startsWith>

=cut

=head2 bytes

String.bytes() -> I<Obj>

Return the

=cut

=head2 char_at

String.char_at() -> I<Obj>

Return the

Aliases: I<charAt>

=cut

=head2 chars

String.chars() -> I<Obj>

Return the

=cut

=head2 chomp

String.chomp() -> I<Obj>

Return the

=cut

=head2 chop

String.chop() -> I<Obj>

Return the

=cut

=head2 clear

String.clear() -> I<Obj>

Return the

=cut

=head2 count

String.count() -> I<Obj>

Return the

=cut

=head2 crypt

String.crypt() -> I<Obj>

Return the

=cut

=head2 decode

String.decode() -> I<Obj>

Return the

=cut

=head2 decode_utf8

String.decode_utf8() -> I<Obj>

Return the

=cut

=head2 die

String.die() -> I<Obj>

Return the

=cut

=head2 dump

String.dump() -> I<Obj>

Return the

Aliases: I<inspect>

=cut

=head2 each

String.each() -> I<Obj>

Return the

Aliases: I<each_char>, I<eachChar>

=cut

=head2 each_line

String.each_line() -> I<Obj>

Return the

Aliases: I<eachLine>

=cut

=head2 encode

String.encode() -> I<Obj>

Return the

=cut

=head2 encode_utf8

String.encode_utf8() -> I<Obj>

Return the

=cut

=head2 ends_with

String.ends_with() -> I<Obj>

Return the

Aliases: I<endsWith>

=cut

=head2 escape

String.escape() -> I<Obj>

Return the

Aliases: I<quotemeta>

=cut

=head2 esub

String.esub() -> I<Obj>

Return the

=cut

=head2 format

String.format() -> I<Obj>

Return the

=cut

=head2 frequire

String.frequire() -> I<Obj>

Return the

=cut

=head2 ft

String.ft() -> I<Obj>

Return the

Aliases: I<substr>, I<substring>

=cut

=head2 gesub

String.gesub() -> I<Obj>

Return the

=cut

=head2 glob

String.glob() -> I<Obj>

Return the

=cut

=head2 gmatch

String.gmatch() -> I<Obj>

Return the

Aliases: I<gmatches>

=cut

=head2 graphs

String.graphs() -> I<Obj>

Return the

Aliases: I<graphemes>, I<to_graphemes>

=cut

=head2 gsub

String.gsub() -> I<Obj>

Return the

Aliases: I<gReplace>

=cut

=head2 hex

String.hex() -> I<Obj>

Return the

=cut

=head2 include

String.include() -> I<Obj>

Return the

Aliases: I<contains>

=cut

=head2 index

String.index() -> I<Obj>

Return the

Aliases: I<indexOf>

=cut

=head2 insert

String.insert() -> I<Obj>

Return the

=cut

=head2 is_empty

String.is_empty() -> I<Obj>

Return the

Aliases: I<isEmpty>

=cut

=head2 join

String.join() -> I<Obj>

Return the

=cut

=head2 lc

String.lc() -> I<Obj>

Return the

Aliases: I<lower>, I<downcase>, I<downCase>, I<toLowerCase>

=cut

=head2 lcfirst

String.lcfirst() -> I<Obj>

Return the

=cut

=head2 len

String.len() -> I<Obj>

Return the

Aliases: I<length>

=cut

=head2 lev

String.lev() -> I<Obj>

Return the

Aliases: I<leven>, I<levenshtein>

=cut

=head2 lines

String.lines() -> I<Obj>

Return the

=cut

=head2 looks_like_number

String.looks_like_number() -> I<Obj>

Return the

=cut

=head2 new

String.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 open

String.open() -> I<Obj>

Return the

=cut

=head2 open_r

String.open_r() -> I<Obj>

Return the

=cut

=head2 ord

String.ord() -> I<Obj>

Return the

=cut

=head2 overlaps

String.overlaps() -> I<Obj>

Return the

=cut

=head2 pack

String.pack() -> I<Obj>

Return the

=cut

=head2 pop

String.pop() -> I<Obj>

Return the

=cut

=head2 printf

String.printf() -> I<Obj>

Return the

=cut

=head2 printlnf

String.printlnf() -> I<Obj>

Return the

=cut

=head2 reduce_operator

String.reduce_operator() -> I<Obj>

Return the

=cut

=head2 repeat

String.repeat() -> I<Obj>

Return the

=cut

=head2 require

String.require() -> I<Obj>

Return the

=cut

=head2 reverse

String.reverse() -> I<Obj>

Return the

=cut

=head2 scan

String.scan() -> I<Obj>

Return the

=cut

=head2 sort

String.sort() -> I<Obj>

Return the

=cut

=head2 split

String.split() -> I<Obj>

Return the

=cut

=head2 sprintlnf

String.sprintlnf() -> I<Obj>

Return the

=cut

=head2 sub

String.sub() -> I<Obj>

Return the

Aliases: I<replace>

=cut

=head2 tc

String.tc() -> I<Obj>

Return the

Aliases: I<ucfirst>, I<title_case>, I<titleCase>

=cut

=head2 tclc

String.tclc() -> I<Obj>

Return the

Aliases: I<capitalize>

=cut

=head2 to

String.to() -> I<Obj>

Return the

Aliases: I<...()>, I<..^()>, I<upto>, I<upTo>, I<range>

=cut

=head2 to_s

String.to_s() -> I<Obj>

Return the

Aliases: I<to_str>, I<to_string>

=cut

=head2 tr

String.tr() -> I<Obj>

Return the

Aliases: I<translit>

=cut

=head2 trans

String.trans() -> I<Obj>

Return the

=cut

=head2 trim

String.trim() -> I<Obj>

Return the

Aliases: I<strip>

=cut

=head2 trim_beg

String.trim_beg() -> I<Obj>

Return the

Aliases: I<trimBeg>, I<strip_beg>, I<stripBeg>

=cut

=head2 trim_end

String.trim_end() -> I<Obj>

Return the

Aliases: I<trimEnd>, I<strip_end>, I<stripEnd>

=cut

=head2 uc

String.uc() -> I<Obj>

Return the

Aliases: I<upper>, I<upcase>, I<upCase>, I<toUpperCase>

=cut

=head2 unescape

String.unescape() -> I<Obj>

Return the

=cut

=head2 unpack

String.unpack() -> I<Obj>

Return the

=cut

=head2 unroll_operator

String.unroll_operator() -> I<Obj>

Return the

=cut

=head2 warn

String.warn() -> I<Obj>

Return the

=cut

=head2 wc

String.wc() -> I<Obj>

Return the

Aliases: I<wordcase>, I<wordCase>

=cut

=head2 words

String.words() -> I<Obj>

Return the

Aliases: I<each_word>, I<eachWord>

=cut

=head2 |

I<Obj> B<|> I<Obj> -> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 ~

I<Obj> B<~> I<Obj> -> I<Obj>

Return the

Aliases: I<not>

=cut

=head2 ≠

I<Obj> B<≠> I<Obj> -> I<Obj>

Return the

Aliases: I<!=()>, I<ne>

=cut

=head2 ≤

I<Obj> B<≤> I<Obj> -> I<Obj>

Return the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

I<Obj> B<≥> I<Obj> -> I<Obj>

Return the

Aliases: I<E<gt>=>, I<ge>

=cut
