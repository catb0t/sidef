
=encoding utf8

=head1 NAME

Sidef::Types::Array::Array

=head1 DESCRIPTION

This module provides the support for arrays.

=head1 SYNOPSIS

=over 2

=item * Creating an array

    var array = (Array.new(obj1, obj2, ...));

or

    var array = [obj1, obj2, ...];

or

    var array = qw(word1 word2 ...);

=item * Retrieving elements

    var elem = array[index];

=item * Modifying elements

    array[index] = someObj;

=item * Applying methods on arrays

    array->method(argument1, argument2, ...);

=back

=head1 INHERITS

Inherits methods from:

    * Sidef
    * Sidef::Convert::Convert

=head1 METHODS


=head2 &

I<Array> B<&> I<Array> -> I<Array>

Return only the elements which exists in both arrays.

    [1, 2, 3] & [1, 3]        # returns [1, 3]
    [1, 3, 3] & [3, 3, 5]     # returns [3, 3]

Returns an object of the same type as the self object.

=cut

=head2 &&

I<Array> B<&&> I<Array> -> I<Array>

Intersect two arrays. The self array is the primary array.

    ['a', 'c'] && ['b', 'd']   # returns ['a', 'b', 'c', 'd']

Returns an object of the same type as the self object.

=cut

=head2 +

I<Array> B<+> I<Array> -> I<Array>

Concatenate two arrays.

    [1, 2] + [3, 4]   # returns [1, 2, 3, 4]

Returns an object of the same type as the self object.

=cut

=head2 ++

I<Array> B<++> I<Obj> -> I<Array>

Increase the array's size by appending one element to it. If no argument is passed, the size will be increased anyway.

    array++             # array size is increased by one
    array ++ "str"      # "str" has been pushed into array

B<WARNING!> This method modifies the array in place.

Returns the self object.

=cut

=head2 -

I<Array> B<-> I<Array> -> I<Array>

Return the difference between two arrays. This is the opposite of the L<I<&>|"&"> method.

    ["x", "y", "z"] - ["y", "x"]    # returns ["z"]

Returns an object of the same type as the self object.

=cut

=head2 --

I<Array>B<--> -> I<Array>

Remove the last element from the array.

    [1, 2, 3]--        # returns [1, 2]

B<WARNING!> This method modifies the array in place.

Returns the self object.

=cut

=head2 ...

I<Array>B<...> -> I<List>

Return the elements of the array as a list. Useful only an array is passed to a function as a list of arguments.

    array = ['x', 'y'];
    some_func(array...);        # the function receives two arguments: ("x", "y")

Returns a list with the elements from the self array. In scalar context, only the first element is returned.

=cut

=head2 <<

I<Array> B<E<lt>E<lt>> I<Number> -> I<Array>

Shift the array to the left with I<Number> elements, and return the elements removed.

    array = [1, 2, 3, 4, 5];
    array << 2                 # returns the first two elements

    # array loses its first two elements, so it contains only: [3, 4, 5]

B<WARNING!> This method modifies the array in place.

Returns the self object.

=cut

=head2 =

I<Slice> B<=> I<Array> -> I<Slice>

This method is used to change the elements in a slice of array.

    array = ["a", "b", "c"];
    array[1, 3, 5]  = ["x", "y", "z"]       # changes the slice elements with the elements from the argument array

    # array is now: ['a', 'x', 'c', 'y', nil, 'z']

B<WARNING!> This method modifies the array in place.

Returns the self object.

=cut

=head2 ==

I<Num> B<==> I<Num> -> I<Num>

Return the

=cut

=head2 >>

I<Num> B<E<gt>E<gt>> I<Num> -> I<Num>

Return the

=cut

=head2 ^

I<Num> B<^> I<Num> -> I<Num>

Return the

=cut

=head2 a

Array.a() -> I<Bool>

Return the

=cut

=head2 all

Array.all() -> I<Bool>

Return the

=cut

=head2 b

Array.b() -> I<Bool>

Return the

=cut

=head2 combine

Array.combine() -> I<Bool>

Return the

=cut

=head2 contains

Array.contains() -> I<Bool>

Return the

=cut

=head2 defined

Array.defined() -> I<Bool>

Return the

=cut

=head2 distinct

Array.distinct() -> I<Bool>

Return the

=cut

=head2 divide

Array.divide() -> I<Bool>

Return the

=cut

=head2 dropLeft

Array.dropLeft() -> I<Bool>

Return the

=cut

=head2 dropRight

Array.dropRight() -> I<Bool>

Return the

=cut

=head2 dump

Array.dump() -> I<Bool>

Return the

=cut

=head2 exists

Array.exists() -> I<Bool>

Return the

=cut

=head2 filter

Array.filter() -> I<Bool>

Return the

=cut

=head2 find

Array.find() -> I<Bool>

Return the

=cut

=head2 first

Array.first() -> I<Bool>

Return the

=cut

=head2 firstIndex

Array.firstIndex() -> I<Bool>

Return the

=cut

=head2 first_index

Array.first_index() -> I<Bool>

Return the

=cut

=head2 ft

Array.ft() -> I<Bool>

Return the

=cut

=head2 get_value

Array.get_value() -> I<Bool>

Return the

=cut

=head2 grep

Array.grep() -> I<Bool>

Return the

=cut

=head2 indexWhere

Array.indexWhere() -> I<Bool>

Return the

=cut

=head2 insert

Array.insert() -> I<Bool>

Return the

=cut

=head2 join

Array.join() -> I<Bool>

Return the

=cut

=head2 joinInsert

Array.joinInsert() -> I<Bool>

Return the

=cut

=head2 join_insert

Array.join_insert() -> I<Bool>

Return the

=cut

=head2 last

Array.last() -> I<Bool>

Return the

=cut

=head2 lastIndex

Array.lastIndex() -> I<Bool>

Return the

=cut

=head2 lastIndexWhere

Array.lastIndexWhere() -> I<Bool>

Return the

=cut

=head2 last_index

Array.last_index() -> I<Bool>

Return the

=cut

=head2 len

Array.len() -> I<Bool>

Return the

=cut

=head2 length

Array.length() -> I<Bool>

Return the

=cut

=head2 make

Array.make() -> I<Bool>

Return the

=cut

=head2 map

Array.map() -> I<Bool>

Return the

=cut

=head2 max

Array.max() -> I<Bool>

Return the

=cut

=head2 mesh

Array.mesh() -> I<Bool>

Return the

=cut

=head2 min

Array.min() -> I<Bool>

Return the

=cut

=head2 multiply

Array.multiply() -> I<Bool>

Return the

=cut

=head2 new

Array.new() -> I<Bool>

Return the

=cut

=head2 offset

Array.offset() -> I<Bool>

Return the

=cut

=head2 pop

Array.pop() -> I<Bool>

Return the

=cut

=head2 push

Array.push() -> I<Bool>

Return the

=cut

=head2 range

Array.range() -> I<Bool>

Return the

=cut

=head2 reduce

Array.reduce() -> I<Bool>

Return the

=cut

=head2 reducePairs

Array.reducePairs() -> I<Bool>

Return the

=cut

=head2 reverse

Array.reverse() -> I<Bool>

Return the

=cut

=head2 reversed

Array.reversed() -> I<Bool>

Return the

=cut

=head2 shift

Array.shift() -> I<Bool>

Return the

=cut

=head2 shuffle

Array.shuffle() -> I<Bool>

Return the

=cut

=head2 size

Array.size() -> I<Bool>

Return the

=cut

=head2 sliceReverse

Array.sliceReverse() -> I<Bool>

Return the

=cut

=head2 sort

Array.sort() -> I<Bool>

Return the

=cut

=head2 splice

Array.splice() -> I<Bool>

Return the

=cut

=head2 sum

Array.sum() -> I<Bool>

Return the

=cut

=head2 takeLeft

Array.takeLeft() -> I<Bool>

Return the

=cut

=head2 takeRight

Array.takeRight() -> I<Bool>

Return the

=cut

=head2 toHash

Array.toHash() -> I<Bool>

Return the

=cut

=head2 to_hash

Array.to_hash() -> I<Bool>

Return the

=cut

=head2 uniq

Array.uniq() -> I<Bool>

Return the

=cut

=head2 uniqLast

Array.uniqLast() -> I<Bool>

Return the

=cut

=head2 uniq_last

Array.uniq_last() -> I<Bool>

Return the

=cut

=head2 unique

Array.unique() -> I<Bool>

Return the

=cut

=head2 uniqueLast

Array.uniqueLast() -> I<Bool>

Return the

=cut

=head2 unique_last

Array.unique_last() -> I<Bool>

Return the

=cut

=head2 unshift

Array.unshift() -> I<Bool>

Return the

=cut

=head2 zip

Array.zip() -> I<Bool>

Return the

=cut

=head2 |

I<Num> B<|> I<Num> -> I<Num>

Return the

=cut
