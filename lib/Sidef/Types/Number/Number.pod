
=encoding utf8

=head1 NAME

Sidef::Types::Number::Number

=head1 DESCRIPTION

This object is ...

=head1 SYNOPSIS

var obj = Number.new(...);


=head1 INHERITS

Inherits methods from:

	* Sidef::Object::Object
	* Sidef::Convert::Convert

=head1 METHODS


=head2 !

I<Obj> B<!> I<Obj> -> I<Obj>

Return the

Aliases: I<fac>, I<fact>, I<factorial>

=cut

=head2 %

I<Obj> B<%> I<Obj> -> I<Obj>

Return the

Aliases: I<mod>

=cut

=head2 %%

I<Obj> B<%%> I<Obj> -> I<Obj>

Return the

Aliases: I<is_div>

=cut

=head2 &

I<Obj> B<&> I<Obj> -> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<x>, I<mul>

=cut

=head2 **

I<Obj> B<**> I<Obj> -> I<Obj>

Return the

Aliases: I<pow>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<add>

=cut

=head2 ++

I<Obj> B<++> I<Obj> -> I<Obj>

Return the

Aliases: I<inc>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<sub>

=cut

=head2 --

I<Obj> B<--> I<Obj> -> I<Obj>

Return the

Aliases: I<dec>

=cut

=head2 ..

I<Obj> B<..> I<Obj> -> I<Obj>

Return the

Aliases: I<arr_to>, I<array_to>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<÷()>, I<div>, I<divide>

=cut

=head2 //

I<Obj> B<//> I<Obj> -> I<Obj>

Return the

Aliases: I<rdiv>, I<rat_div>

=cut

=head2 :

I<Obj> B<:> I<Obj> -> I<Obj>

Return the

Aliases: I<c>, I<complex>

=cut

=head2 <

I<Obj> B<E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<lt>

=cut

=head2 <<

I<Obj> B<E<lt>E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<shift_left>

=cut

=head2 <=>

I<Obj> B<E<lt>=E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<cmp>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>, I<equals>

=cut

=head2 >

I<Obj> B<E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<gt>

=cut

=head2 >>

I<Obj> B<E<gt>E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<shift_right>

=cut

=head2 ^

I<Obj> B<^> I<Obj> -> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 ^..

I<Obj> B<^..> I<Obj> -> I<Obj>

Return the

Aliases: I<down_to>, I<downto>

=cut

=head2 abs

Number.abs() -> I<Obj>

Return the

Aliases: I<pos>, I<positive>

=cut

=head2 acmp

Number.acmp() -> I<Obj>

Return the

=cut

=head2 arr_downto

Number.arr_downto() -> I<Obj>

Return the

Aliases: I<array_downto>

=cut

=head2 as_bin

Number.as_bin() -> I<Obj>

Return the

Aliases: I<to_bin>

=cut

=head2 as_float

Number.as_float() -> I<Obj>

Return the

=cut

=head2 as_hex

Number.as_hex() -> I<Obj>

Return the

Aliases: I<to_hex>

=cut

=head2 as_oct

Number.as_oct() -> I<Obj>

Return the

Aliases: I<to_oct>

=cut

=head2 atan

Number.atan() -> I<Obj>

Return the

=cut

=head2 atan2

Number.atan2() -> I<Obj>

Return the

=cut

=head2 bin

Number.bin() -> I<Obj>

Return the

Aliases: I<from_bin>

=cut

=head2 ceil

Number.ceil() -> I<Obj>

Return the

=cut

=head2 chr

Number.chr() -> I<Obj>

Return the

=cut

=head2 commify

Number.commify() -> I<Obj>

Return the

=cut

=head2 cos

Number.cos() -> I<Obj>

Return the

=cut

=head2 de

Number.de() -> I<Obj>

Return the

Aliases: I<denominator>

=cut

=head2 digit

Number.digit() -> I<Obj>

Return the

=cut

=head2 digits

Number.digits() -> I<Obj>

Return the

=cut

=head2 divides

Number.divides() -> I<Obj>

Return the

=cut

=head2 divmod

Number.divmod() -> I<Obj>

Return the

=cut

=head2 exp

Number.exp() -> I<Obj>

Return the

=cut

=head2 expmod

Number.expmod() -> I<Obj>

Return the

Aliases: I<modpow>

=cut

=head2 floor

Number.floor() -> I<Obj>

Return the

=cut

=head2 fround

Number.fround() -> I<Obj>

Return the

Aliases: I<roundf>

=cut

=head2 hex

Number.hex() -> I<Obj>

Return the

Aliases: I<from_hex>

=cut

=head2 i

Number.i() -> I<Obj>

Return the

=cut

=head2 inf

Number.inf() -> I<Obj>

Return the

=cut

=head2 int

Number.int() -> I<Obj>

Return the

Aliases: I<to_i>, I<as_int>

=cut

=head2 is_even

Number.is_even() -> I<Obj>

Return the

=cut

=head2 is_inf

Number.is_inf() -> I<Obj>

Return the

Aliases: I<is_infinite>

=cut

=head2 is_int

Number.is_int() -> I<Obj>

Return the

Aliases: I<is_integer>

=cut

=head2 is_nan

Number.is_nan() -> I<Obj>

Return the

Aliases: I<is_NaN>

=cut

=head2 is_neg

Number.is_neg() -> I<Obj>

Return the

Aliases: I<is_negative>

=cut

=head2 is_odd

Number.is_odd() -> I<Obj>

Return the

=cut

=head2 is_one

Number.is_one() -> I<Obj>

Return the

=cut

=head2 is_pos

Number.is_pos() -> I<Obj>

Return the

Aliases: I<is_positive>

=cut

=head2 is_zero

Number.is_zero() -> I<Obj>

Return the

=cut

=head2 len

Number.len() -> I<Obj>

Return the

Aliases: I<length>

=cut

=head2 ln

Number.ln() -> I<Obj>

Return the

=cut

=head2 log

Number.log() -> I<Obj>

Return the

=cut

=head2 log10

Number.log10() -> I<Obj>

Return the

=cut

=head2 log2

Number.log2() -> I<Obj>

Return the

=cut

=head2 max

Number.max() -> I<Obj>

Return the

=cut

=head2 min

Number.min() -> I<Obj>

Return the

=cut

=head2 nan

Number.nan() -> I<Obj>

Return the

Aliases: I<NaN>

=cut

=head2 neg

Number.neg() -> I<Obj>

Return the

Aliases: I<negate>

=cut

=head2 new

Number.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 nok

Number.nok() -> I<Obj>

Return the

Aliases: I<binomial>

=cut

=head2 npow

Number.npow() -> I<Obj>

Return the

=cut

=head2 npow2

Number.npow2() -> I<Obj>

Return the

=cut

=head2 nu

Number.nu() -> I<Obj>

Return the

Aliases: I<numerator>

=cut

=head2 nude

Number.nude() -> I<Obj>

Return the

Aliases: I<parts>

=cut

=head2 oct

Number.oct() -> I<Obj>

Return the

Aliases: I<from_oct>

=cut

=head2 of

Number.of() -> I<Obj>

Return the

=cut

=head2 rand

Number.rand() -> I<Obj>

Return the

=cut

=head2 range

Number.range() -> I<Obj>

Return the

=cut

=head2 rat

Number.rat() -> I<Obj>

Return the

=cut

=head2 root

Number.root() -> I<Obj>

Return the

=cut

=head2 round

Number.round() -> I<Obj>

Return the

=cut

=head2 sign

Number.sign() -> I<Obj>

Return the

=cut

=head2 sin

Number.sin() -> I<Obj>

Return the

=cut

=head2 sqrt

Number.sqrt() -> I<Obj>

Return the

=cut

=head2 sstr

Number.sstr() -> I<Obj>

Return the

=cut

=head2 times

Number.times() -> I<Obj>

Return the

=cut

=head2 to

Number.to() -> I<Obj>

Return the

Aliases: I<...()>, I<..^()>, I<up_to>, I<upto>

=cut

=head2 to_s

Number.to_s() -> I<Obj>

Return the

Aliases: I<dump>

=cut

=head2 troot

Number.troot() -> I<Obj>

Return the

=cut

=head2 |

I<Obj> B<|> I<Obj> -> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 ~

I<Obj> B<~> I<Obj> -> I<Obj>

Return the

Aliases: I<not>

=cut

=head2 ≠

I<Obj> B<≠> I<Obj> -> I<Obj>

Return the

Aliases: I<!=()>, I<ne>

=cut

=head2 ≤

I<Obj> B<≤> I<Obj> -> I<Obj>

Return the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

I<Obj> B<≥> I<Obj> -> I<Obj>

Return the

Aliases: I<E<gt>=>, I<ge>

=cut
