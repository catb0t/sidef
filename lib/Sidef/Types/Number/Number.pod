
=encoding utf8

=head1 NAME

Sidef::Types::Number::Number

=head1 DESCRIPTION

This object is ...

=head1 SYNOPSIS

var obj = (Number.new(...));


=head1 INHERITS

Inherits methods from:

	* Sidef
	* Sidef::Convert::Convert

=head1 METHODS

=head2 !

I<Num> B<!> I<Num> -> I<Num>

Return the

=cut


=head2 !=

I<Num> B<!=> I<Num> -> I<Num>

Return the

=cut

=head2 %

I<Num> B<%> I<Num> -> I<Num>

Return the

=cut

=head2 &

I<Num> B<&> I<Num> -> I<Num>

Return the

=cut

=head2 *

I<Num> B<*> I<Num> -> I<Num>

Return the

=cut

=head2 **

I<Num> B<**> I<Num> -> I<Num>

Return the

=cut

=head2 +

I<Num> B<+> I<Num> -> I<Num>

Return the

=cut

=head2 ++

I<Num> B<++> I<Num> -> I<Num>

Return the

=cut

=head2 -

I<Num> B<-> I<Num> -> I<Num>

Return the

=cut

=head2 --

I<Num> B<--> I<Num> -> I<Num>

Return the

=cut

=head2 ..

I<Num> B<..> I<Num> -> I<Num>

Return the

=cut

=head2 /

I<Num> B</> I<Num> -> I<Num>

Return the

=cut

=head2 <

I<Num> B<E<lt>> I<Num> -> I<Num>

Return the

=cut

=head2 <<

I<Num> B<E<lt>E<lt>> I<Num> -> I<Num>

Return the

=cut

=head2 <=

I<Num> B<E<lt>=> I<Num> -> I<Num>

Return the

=cut

=head2 <=>

I<Num> B<E<lt>=E<gt>> I<Num> -> I<Num>

Return the

=cut

=head2 ==

I<Num> B<==> I<Num> -> I<Num>

Return the

=cut

=head2 >

I<Num> B<E<gt>> I<Num> -> I<Num>

Return the

=cut

=head2 >=

I<Num> B<E<gt>=> I<Num> -> I<Num>

Return the

=cut

=head2 >>

I<Num> B<E<gt>E<gt>> I<Num> -> I<Num>

Return the

=cut

=head2 ^

I<Num> B<^> I<Num> -> I<Num>

Return the

=cut

=head2 abs

Number.abs() -> I<Bool>

Return the

=cut

=head2 as_int

Number.as_int() -> I<Bool>

Return the

=cut

=head2 atan2

Number.atan2() -> I<Bool>

Return the

=cut

=head2 ceil

Number.ceil() -> I<Bool>

Return the

=cut

=head2 chr

Number.chr() -> I<Bool>

Return the

=cut

=head2 commify

Number.commify() -> I<Bool>

Return the

=cut

=head2 cos

Number.cos() -> I<Bool>

Return the

=cut

=head2 downTo

Number.downTo() -> I<Bool>

Return the

=cut

=head2 downto

Number.downto() -> I<Bool>

Return the

=cut

=head2 dump

Number.dump() -> I<Bool>

Return the

=cut

=head2 exp

Number.exp() -> I<Bool>

Return the

=cut

=head2 fac

Number.fac() -> I<Bool>

Return the

=cut

=head2 factorial

Number.factorial() -> I<Bool>

Return the

=cut

=head2 floor

Number.floor() -> I<Bool>

Return the

=cut

=head2 fRound

Number.fRound() -> I<Bool>

Return the

=cut

=head2 fround

Number.fround() -> I<Bool>

Return the

=cut

=head2 hex

Number.hex() -> I<Bool>

Return the

=cut

=head2 inf

Number.inf() -> I<Bool>

Return the

=cut

=head2 int

Number.int() -> I<Bool>

Return the

=cut

=head2 is_even

Number.is_even() -> I<Bool>

Return the

=cut

=head2 is_int

Number.is_int() -> I<Bool>

Return the

=cut

=head2 is_integer

Number.is_integer() -> I<Bool>

Return the

=cut

=head2 is_nan

Number.is_nan() -> I<Bool>

Return the

=cut

=head2 is_NaN

Number.is_NaN() -> I<Bool>

Return the

=cut

=head2 is_neg

Number.is_neg() -> I<Bool>

Return the

=cut

=head2 is_negative

Number.is_negative() -> I<Bool>

Return the

=cut

=head2 is_odd

Number.is_odd() -> I<Bool>

Return the

=cut

=head2 is_pos

Number.is_pos() -> I<Bool>

Return the

=cut

=head2 is_positive

Number.is_positive() -> I<Bool>

Return the

=cut

=head2 isEven

Number.isEven() -> I<Bool>

Return the

=cut

=head2 isInt

Number.isInt() -> I<Bool>

Return the

=cut

=head2 isInteger

Number.isInteger() -> I<Bool>

Return the

=cut

=head2 isNaN

Number.isNaN() -> I<Bool>

Return the

=cut

=head2 isNeg

Number.isNeg() -> I<Bool>

Return the

=cut

=head2 isNegative

Number.isNegative() -> I<Bool>

Return the

=cut

=head2 isOdd

Number.isOdd() -> I<Bool>

Return the

=cut

=head2 isPos

Number.isPos() -> I<Bool>

Return the

=cut

=head2 isPositive

Number.isPositive() -> I<Bool>

Return the

=cut

=head2 len

Number.len() -> I<Bool>

Return the

=cut

=head2 length

Number.length() -> I<Bool>

Return the

=cut

=head2 log

Number.log() -> I<Bool>

Return the

=cut

=head2 log10

Number.log10() -> I<Bool>

Return the

=cut

=head2 log2

Number.log2() -> I<Bool>

Return the

=cut

=head2 nan

Number.nan() -> I<Bool>

Return the

=cut

=head2 NaN

Number.NaN() -> I<Bool>

Return the

=cut

=head2 neg

Number.neg() -> I<Bool>

Return the

=cut

=head2 negate

Number.negate() -> I<Bool>

Return the

=cut

=head2 new

Number.new() -> I<Bool>

Return the

=cut

=head2 new_int

Number.new_int() -> I<Bool>

Return the

=cut

=head2 newInt

Number.newInt() -> I<Bool>

Return the

=cut

=head2 next_power_of_two

Number.next_power_of_two() -> I<Bool>

Return the

=cut

=head2 nextPowerOfTwo

Number.nextPowerOfTwo() -> I<Bool>

Return the

=cut

=head2 not

Number.not() -> I<Bool>

Return the

=cut

=head2 pi

Number.pi() -> I<Bool>

Return the

=cut

=head2 rand

Number.rand() -> I<Bool>

Return the

=cut

=head2 range

Number.range() -> I<Bool>

Return the

=cut

=head2 root

Number.root() -> I<Bool>

Return the

=cut

=head2 round

Number.round() -> I<Bool>

Return the

=cut

=head2 roundf

Number.roundf() -> I<Bool>

Return the

=cut

=head2 sign

Number.sign() -> I<Bool>

Return the

=cut

=head2 sin

Number.sin() -> I<Bool>

Return the

=cut

=head2 sqrt

Number.sqrt() -> I<Bool>

Return the

=cut

=head2 sqrt_n

Number.sqrt_n() -> I<Bool>

Return the

=cut

=head2 sqrtN

Number.sqrtN() -> I<Bool>

Return the

=cut

=head2 to

Number.to() -> I<Bool>

Return the

=cut

=head2 upto

Number.upto() -> I<Bool>

Return the

=cut

=head2 upTo

Number.upTo() -> I<Bool>

Return the

=cut

=head2 |

I<Num> B<|> I<Num> -> I<Num>

Return the

=cut
