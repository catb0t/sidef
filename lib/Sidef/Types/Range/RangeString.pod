
=encoding utf8

=head1 NAME

Sidef::Types::Range::RangeString

=head1 DESCRIPTION

This object is ...

=head1 SYNOPSIS

var obj = RangeString.new(...);


=head1 INHERITS

Inherits methods from:

	* Sidef::Object::Object

=head1 METHODS


=head2 !=

I<Obj> B<!=> I<Obj> -> I<Obj>

Return the

Aliases: I<ne>

=cut

=head2 ...

I<Obj> B<...> I<Obj> -> I<Obj>

Return the

Aliases: I<to_list>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 all

RangeString.all() -> I<Obj>

Return the

=cut

=head2 any

RangeString.any() -> I<Obj>

Return the

=cut

=head2 bounds

RangeString.bounds() -> I<Obj>

Return the

=cut

=head2 contain

RangeString.contain() -> I<Obj>

Return the

Aliases: I<include>, I<contains>, I<includes>

=cut

=head2 cross_operator

RangeString.cross_operator() -> I<Obj>

Return the

=cut

=head2 dump

RangeString.dump() -> I<Obj>

Return the

=cut

=head2 flip

RangeString.flip() -> I<Obj>

Return the

Aliases: I<reverse>

=cut

=head2 for

RangeString.for() -> I<Obj>

Return the

Aliases: I<each>, I<foreach>

=cut

=head2 grep

RangeString.grep() -> I<Obj>

Return the

Aliases: I<select>

=cut

=head2 iter

RangeString.iter() -> I<Obj>

Return the

=cut

=head2 len

RangeString.len() -> I<Obj>

Return the

Aliases: I<length>

=cut

=head2 map

RangeString.map() -> I<Obj>

Return the

=cut

=head2 map_operator

RangeString.map_operator() -> I<Obj>

Return the

=cut

=head2 max

RangeString.max() -> I<Obj>

Return the

=cut

=head2 min

RangeString.min() -> I<Obj>

Return the

=cut

=head2 new

RangeString.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 pam_operator

RangeString.pam_operator() -> I<Obj>

Return the

=cut

=head2 reduce

RangeString.reduce() -> I<Obj>

Return the

=cut

=head2 reduce_operator

RangeString.reduce_operator() -> I<Obj>

Return the

=cut

=head2 step

RangeString.step() -> I<Obj>

Return the

=cut

=head2 to_a

RangeString.to_a() -> I<Obj>

Return the

Aliases: I<to_array>

=cut

=head2 unroll_operator

RangeString.unroll_operator() -> I<Obj>

Return the

=cut
