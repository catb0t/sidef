
=encoding utf8

=head1 NAME

Sidef::Types::Hash::Hash

=head1 DESCRIPTION

This object is ...

=head1 SYNOPSIS

var obj = Hash.new(...);


=head1 INHERITS

Inherits methods from:

	* Sidef::Object::Object

=head1 METHODS


=head2 !=

I<Obj> B<!=> I<Obj> -> I<Obj>

Return the

Aliases: I<ne>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<merge>, I<concat>

=cut

=head2 :

I<Obj> B<:> I<Obj> -> I<Obj>

Return the

Aliases: I<new>, I<call>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 ===

I<Obj> B<===> I<Obj> -> I<Obj>

Return the

Aliases: I<duplicate_of>, I<duplicateOf>

=cut

=head2 add

Hash.add() -> I<Obj>

Return the

Aliases: I<append>

=cut

=head2 copy

Hash.copy() -> I<Obj>

Return the

=cut

=head2 default

Hash.default() -> I<Obj>

Return the

=cut

=head2 delete

Hash.delete() -> I<Obj>

Return the

=cut

=head2 delete_if

Hash.delete_if() -> I<Obj>

Return the

Aliases: I<deleteIf>

=cut

=head2 dump

Hash.dump() -> I<Obj>

Return the

=cut

=head2 each

Hash.each() -> I<Obj>

Return the

Aliases: I<each_pair>

=cut

=head2 each_key

Hash.each_key() -> I<Obj>

Return the

=cut

=head2 each_value

Hash.each_value() -> I<Obj>

Return the

=cut

=head2 exists

Hash.exists() -> I<Obj>

Return the

Aliases: I<has_key>, I<haskey>, I<contains>

=cut

=head2 flip

Hash.flip() -> I<Obj>

Return the

=cut

=head2 get

Hash.get() -> I<Obj>

Return the

=cut

=head2 grep

Hash.grep() -> I<Obj>

Return the

Aliases: I<select>

=cut

=head2 keys

Hash.keys() -> I<Obj>

Return the

=cut

=head2 len

Hash.len() -> I<Obj>

Return the

Aliases: I<length>

=cut

=head2 map_val

Hash.map_val() -> I<Obj>

Return the

Aliases: I<mapval>, I<mapVal>

=cut

=head2 merge_values

Hash.merge_values() -> I<Obj>

Return the

Aliases: I<mergeValues>

=cut

=head2 sort_by

Hash.sort_by() -> I<Obj>

Return the

=cut

=head2 to_a

Hash.to_a() -> I<Obj>

Return the

Aliases: I<pairs>, I<to_array>, I<to_pairs>, I<toArray>, I<toPairs>

=cut

=head2 values

Hash.values() -> I<Obj>

Return the

=cut
