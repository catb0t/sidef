
=encoding utf8

=head1 NAME

Sidef::Convert::Convert

=head1 DESCRIPTION

This module helps with the conversion between object types.

=head1 SYNOPSIS

This module can only be used as a parent:

        our @ISA = qw(Sidef::Convert::Convert);

or

        use parent qw(Sidef::Convert::Convert);

=head1 METHODS

=head2 to_array

Obj.to_array() -> I<Array>

Convert the self object into an array.

    "str".to_array  =>  ["str"]

Returns an object of type: C<Sidef::Types::Array::Array>

=cut

=head2 to_bool

Obj.to_bool() -> I<Bool>

Convert the self object into a boolean value.

      1.to_bool   =>   true
    "0".to_bool   =>   false

Returns an object of type: C<Sidef::Types::Bool::Bool>

=cut

=head2 to_byte

Obj.to_byte() -> I<Byte>

Convert the self object into a numeric byte value.

    "a".to_byte   =>   97

Returns an object of type: C<Sidef::Types::Byte::Byte>

=cut

=head2 to_bytes

Obj.to_bytes() -> I<Bytes>

Convert the self object into an array of bytes,

    "abc".to_bytes  =>  [97, 98, 99]

Returns an object of type: C<Sidef::Types::Byte::Bytes>

=cut

=head2 to_c

Convert.to_c() -> I<Complex>

Convert the self object into a Complex object.

    "12".to_c;    => Complex(12, 0)

Aliases: I<to_complex>

Returns an object of type: C<Sidef::Types::Number::Complex>

=cut

=head2 to_caller

Convert.to_caller() -> I<Obj>

Return the

Aliases: I<toCaller>

=cut

=head2 to_char

Obj.to_char() -> I<Char>

Convert the self object into a character object.

        4.to_char   =>   "4"
    "xyz".to_char   =>   "x"

Returns an object of type: C<Sidef::Types::Char::Char>

=cut

=head2 to_chars

Obj.to_chars() -> I<Chars>

Convert the self object into an array of characters.

    "abc".to_chars   => ['a', 'b', 'c']

Returns an object of type: C<Sidef::Types::Char::Chars>

=cut

=head2 to_dir

Obj.to_dir() -> I<Dir>

Convert the self object into a directory type-object.

    '/my/dir'.to_dir  =>  Dir.new('/my/dir')

Returns an object of type: C<Sidef::Types::Glob::Dir>

=cut

=head2 to_f

Obj.to_f() -> I<Number>

Convert the self object into a floating-point number.

    "123.45".to_f      => 123.45

Aliases: I<to_float>

Return an object of type: C<Sidef::Types::Number::Number>

=cut

=head2 to_fcaller

Obj.to_fcaller() -> I<Obj>

Return the

Aliases: I<toFcaller>

=cut

=head2 to_file

Obj.to_file() -> I<File>

Convert the self object into a file type-object.

    '/my/file'.to_file  =>  File.new('/my/file')

Returns an object of type: C<Sidef::Types::Glob::File>

=cut

=head2 to_i

Obj.to_i() -> I<Num>

Convert the self object into an integer.

    "12.34".to_i  =>  12
    332.999.to_i  =>  332

Aliases: I<to_int()>, I<to_integer()>.

Returns an object of type: C<Sidef::Types::Number::Number>

=cut

=head2 toNum

Obj.to_num() -> I<Num>

Convert the self object into a number type-object.

    "12.34".to_num  =>  12.34
      12.34.to_num  =>  12.34

Returns an object of type: C<Sidef::Types::Number::Number>

=cut

=head2 to_obj

Obj.to_obj(Type) -> I<Type>

Convert the self object into a specific type.

    "12.3".to_obj(Num)    => 12.3
    "12.3".to_obj(Arr)    => ["12.3"]

Aliases: I<to_object>

=cut

=head2 to_r

Obj.to_r() -> I<Number>

Convert the self object into a rational number.

    0.5.to_r  => 1/2

Aliases: I<to_rat>, I<to_rational>

Returns an object of type: C<Sidef::Types::Number::Number>

=cut

=head2 to_re

Obj.to_re() -> I<Regex>

Convert the self object into a regular expression.

    '([a-z])'.to_re   =>  Regex.new('([a-z])')

Aliases: I<to_re()>, I<to_regex()>.

Returns an object of type: C<Sidef::Types::Regex::Regex>

=cut

=head2 to_s

Obj.to_s() -> I<String>

Convert the self object into a string type-object.

When the self object is an array-like object,
its elements will be joined one-level deep with a space character.

         42.to_s  => '42'
    [1,2,3].to_s  => '1 2 3'

Aliases: I<to_str()>, I<to_string()>.

Returns an object of type: C<Sidef::Types::String::String>

=cut
