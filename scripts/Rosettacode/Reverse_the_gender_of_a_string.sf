#!/usr/bin/ruby

#
## http://rosettacode.org/wiki/Reverse_the_gender_of_a_string
#

var male2female = <<'EOD';
  maleS femaleS, maleness femaleness, him her, himself herself, his her, his
  hers, he she, Mr Mrs, Mister Missus, Ms Mr, Master Miss, MasterS MistressES,
  uncleS auntS, nephewS nieceS, sonS daughterS, grandsonS granddaughterS,
  brotherS sisterS, man woman, men women, boyS girlS, paternal maternal,
  grandfatherS grandmotherS, GodfatherS GodmotherS, GodsonS GoddaughterS,
  fiancéS fiancéeS, husband wife, husbands wives, fatherS motherS, bachelorS
  spinsterS, bridegroomS brideS, widowerS widowS, KnightS DameS, Sir DameS,
  KingS QueenS, DukeS DuchessES, PrinceS PrincessES, Lord Lady, Lords Ladies,
  MarquessES MarchionessES, EarlS CountessES, ViscountS ViscountessES, ladS
  lassES, sir madam, gentleman lady, gentlemen ladies, BaronS BaronessES,
  stallionS mareS, ramS eweS, coltS fillieS, billy nanny, billies nannies,
  bullS cowS, godS goddessES, heroS heroineS, shirtS blouseS, undies nickers,
  sweat glow, jackarooS jillarooS, gigoloS hookerS, landlord landlady,
  landlords landladies, manservantS maidservantS, actorS actressES, CountS
  CountessES, EmperorS EmpressES, giantS giantessES, heirS heiressES, hostS
  hostessES, lionS lionessES, managerS manageressES, murdererS murderessES,
  priestS priestessES, poetS poetessES, shepherdS shepherdessES, stewardS
  stewardessES, tigerS tigressES, waiterS waitressES, cockS henS, dogS bitchES,
  drakeS henS, dogS vixenS, tomS tibS, boarS sowS, buckS roeS, peacockS
  peahenS, gander goose, ganders geese, friarS nunS, monkS nunS
EOD

var m2f = male2female.split(/,\s*/).map { |tok| tok.words};

var re_plural = /E?S\z/;
var re_ES = /ES\z/;

func gen_pluralize(m, f) {
    [
        [m - re_plural, f - re_plural],
        [m.sub(re_ES, 'es'), f.sub(re_ES, 'es')],
        [m.sub(re_plural, 's'), f.sub(re_plural, 's')],
    ]
}

var dict = Hash.new;

m2f.each { |pair|
    var (m, f) = pair...;
    gen_pluralize(m, f).each { |arr|
        var (x, y) = arr.map{.lc}...;
        if (!dict.contains(x)) {
            dict[x, y] = [y, x];
        } else {
            dict[y] = x;
        }
    }
}

var gen_re = Regex.new('\b(' + dict.keys.join('|') + ')\b', 'i');

func copy_case(orig, repl) {
    var a = orig.split('');
    var b = repl.split('');

    var uc = 0;
    var min = [a, b].map{.len}.min;
    0 .. min-1 each { |i|
        if (a[i] ~~ /^[[:upper:]]/) {
            b[i].uc!;
            uc += 1;
        }
    };

    uc == min ? repl.uc : b.join('');
}

func reverse_gender(text) {
    text.gsub(gen_re, { |gen| copy_case(gen, dict[gen.lc]) });
}


var text = <<'EOT';
When a new-hatched savage running wild about his native
woodlands in a grass clout, followed by the nibbling goats, as if
he were a green sapling; even then, in Queequeg's ambitious soul,
lurked a strong desire to see something more of Christendom than
a specimen whaler or two. His father was a High Chief, a King;
his uncle a High Priest; and on the maternal side he boasted aunts
who were the wives of unconquerable warriors. There was excellent
blood in his veins-royal stuff; though sadly vitiated, I fear,
by the cannibal propensity he nourished in his untutored youth.
EOT

var rev_1 = reverse_gender(text);
var rev_2 = reverse_gender(rev_1);

assert_eq(rev_2, text);

var rstr = reverse_gender("She was a soul stripper. She took my heart!");
assert_eq(rstr, "He was a soul stripper. He took my heart!");

say rstr;
