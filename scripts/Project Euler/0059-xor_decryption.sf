#!/usr/bin/ruby

# Your task has been made easy, as the encryption key consists of three lower case characters.
# Using cipher.txt (right click and 'Save Link/Target As...'), a file containing the encrypted
# ASCII codes, and the knowledge that the plain text must contain common English words, decrypt
# the message and find the sum of the ASCII values in the original text.

# https://projecteuler.net/problem=59

# Answer: 107359

var enc = eval('[' + %f'0059-cipher.txt'.open_r.slurp + ']');

var p_len = 3;      # password length
var pass = [];      # decoded password

range(0, p_len-1).each { |p|
    range('a'.ord, 'z'.ord).each { |c|

        var dec = [];
        range(p, enc.end, p_len).each { |i|
            dec << chr(enc[i] ^ c);
        }

        # The number of non-alpha and non-space chars
        var count = dec.join.count(/[^a-z ]/i);

        # The ratio must be less than 10%
        if (count/dec.len < 0.1) {
            pass << c;
            break;
        }
    }
}

var dec = [];
enc.range.each { |i|
    dec << enc[i]^pass[i % p_len];
}

say dec.sum;

__END__
var enc = eval('[' + %f'p059_cipher.txt'.open_r.slurp + ']');

var p_len = 3;      # password length
var pass = [];      # decoded password

range(0, p_len-1).each { |p|
    range('a'.ord, 'z'.ord).each { |c|

        var dec = [];
        range(p, enc.end, p_len).each { |i|
            dec << chr(enc[i] ^ c);
        }

        # The number of non-alpha and non-space chars
        var count = dec.join.count(/[^a-z ]/i);

        # The ratio must be less that 10%
        if (count/dec.len < 0.1) {
            pass << c;
            break;
        }
    }
}

var dec = [];
enc.range.each { |i|
    dec << enc[i]^pass[i % p_len];
}

say dec.sum;





__END__

var dec = [];
enc.range.each { |i|
    dec << enc[i]^key[i % 3];
}

say dec.sum;


__END__


'a'.ord ... 'z'.ord -> each { |c|

    var dec = [];
    range(1, enc.end, 3).each { |i|
        dec << chr(enc[i]^c);
    }

    dec.first {|c| c.ord < 32 } && next;
    dec.first {|c| c.ord >= 127 } && next;

    say "#{c.chr}: #{dec.join(' ')}";
    say '';

    #say "#{c.chr}: #{enc[0]^c -> chr}..#{enc[3]^c -> chr}..#{enc[6]^c -> chr}..#{enc[9]^c -> chr}";
}

__END__
func lucas(n) is cached {
    n.is_one ? 1
             : (n.is_zero ? 2
                          : (lucas(n-1) + lucas(n-2)));
}

func fib(n) is cached {
    n.is_one ? 1
             : (n.is_zero ? 0
                          : (fib(n-1) + fib(n-2)));
}

func f(x) {
    - x*(3*x + 1) / (x**2 + x - 1) -> roundf(0);
}

var sum = 0;

30.times { |i|          # starts at 1
    if (i.is_even) {
        sum += f(fib(i)/fib(i+1));
    }
    else {
        var a = fib(i+1)+lucas(i);
        var b = fib(i+2)+lucas(i+1);
        sum += f(a/b);
    }
}

say sum;
