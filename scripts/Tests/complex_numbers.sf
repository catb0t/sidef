#!/usr/bin/ruby

# http://rosettacode.org/wiki/Arithmetic/Complex#Sidef

var a = 1:1;                         # same as: Complex(1, 1)
var b = Complex(3.14159, 1.25);

[   a + b,                  # addition
    a * b,                  # multiplication
    -a,                     # negation
    a.reciprocal,           # multiplicative inverse
    ~a,                     # complex conjugate
    a.abs,                  # abs
    a.sqrt,                 # sqrt
    b.re,                   # real part
    b.im,                   # imaginary part
].each { |c| say c };

assert_eq(Complex(3, 4), 3:4)
assert_eq(Complex(0, 4), 4.i)
assert_eq(Complex(3, 0), 3.c)
assert_eq(Complex(0, 1), Complex::i)
assert_eq(Complex(3, 4).conj, ~(3:4))
assert_eq(Complex("3+4i"), Complex(3, 4));
assert_eq(Complex("i"), Complex::i);
assert_eq(Complex("-i"), -Complex::i);
assert_eq(Complex("-4-2i"), Complex(-4, -2));
assert_eq(Complex("+2i"), Complex(0, 2));
assert_eq(Complex("4i"), Complex(0, 4));
assert_eq(Complex("-1i"), Complex(0, -1));
assert_eq(Complex("-32"), Complex(-32, 0));
assert_eq(Complex("1+i"), Complex(1, 1));
assert_eq(Complex(4, "3+i"), 4 + Complex(3, 1));
assert_eq(Complex("-12", "i"), Complex(-12, 1));
assert_eq(Complex("12", "-i"), Complex(12, -1));
assert_eq(Complex("-32i", 42), Complex(42, -32));
assert_eq(Complex("1-i", "2-i"), Complex(1, -1) + Complex(2, -1));
assert_eq(Complex("+3+i", "+2+i"), Complex(3, 1) + Complex(2, 1));
assert_eq(Complex("-3+2i", "-9+3i"), Complex(-3, 2) + Complex(-9, 3));
assert_eq(Complex(Complex(5,9), Complex(42, 12)), Complex(5,9) + Complex(42, 12));
