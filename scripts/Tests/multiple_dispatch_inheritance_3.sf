#!/usr/bin/ruby

class Fundamental {}
class Base < Fundamental { }

class Log < Base {}
class Exp < Base {}
class Sin < Base {}

class Exp(v) {

    method *(Exp o) {
        "Exp: #{self} * #{o}"
    }

    method *(Log o) {
        "Exp: #{self} * #{o}"
    }

    method to_s {
        "Exp"
    }
}

class Log(v) {

    method *(Log o) {
        "Log: #{self} * #{o}"
    }

    method to_s {
        "Log"
    }
}

class Sin(v) {

    method *(Log o) {
        "Sin: #{self} * #{o}"
    }

    method to_s {
        "Sin"
    }
}

class Fundamental {

    method *(Exp o) {
        "Fundamental: #{self} * #{o}"
    }

    method *(Sin o) {
        "Fundamental: #{self} * #{o}"
    }

    method *(Number o) {
        "Fundamental: #{self} * #{o}"
    }

    method *(Object o) {
        "Fundamental: #{self} * #{o}"
    }
}

class Base {

    method *(Exp o) {
        "Base: #{self} * #{o}"
    }

    method *(Number o) {
        "Base: #{self} * #{o}"
    }
}


var e = Exp(1)
var l = Log(5)
var s = Sin(7)

say l*l
say l*e
say s*l

assert_eq(l*l,   "Log: Log * Log")
assert_eq(l*e,   "Base: Log * Exp")
assert_eq(e*e,   "Exp: Exp * Exp")
assert_eq(e*l,   "Exp: Exp * Log")
assert_eq(e*s,   "Fundamental: Exp * Sin")
assert_eq(l*s,   "Fundamental: Log * Sin")
assert_eq(s*s,   "Fundamental: Sin * Sin")
assert_eq(s*l,   "Sin: Sin * Log")
assert_eq(s*e,   "Base: Sin * Exp")
assert_eq(l*3,   "Base: Log * 3")
assert_eq(e*4,   "Base: Exp * 4")
assert_eq(s*e,   "Base: Sin * Exp")
assert_eq(s*"a", "Fundamental: Sin * a")
assert_eq(l*"a", "Fundamental: Log * a")
assert_eq(e*"a", "Fundamental: Exp * a")
assert_eq(l*s,   "Fundamental: Log * Sin")
