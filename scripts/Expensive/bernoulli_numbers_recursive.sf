#!/usr/bin/ruby

#
## The Bernoulli numbers computed recursively.
#

func bernoulli_number{};    # must be declared before calling

func binomial(n, k) {
    (k == 0) || (n == k) ? 1.0 : (binomial(n - 1, k - 1) + binomial(n - 1, k));
}

func bern_helper(n, k) {
    binomial(n, k) * (bernoulli_number(k) / (n - k + 1));
}

func bern_diff(n, k, d) {
    n < k ? d : bern_diff(n, k + 1, d - bern_helper(n + 1, k));
}

bernoulli_number = func(n) {

    n == 1   && return 1/2;
    n.is_odd && return   0;

    n > 0 ? bern_diff(n - 1, 0, 1) : 1;
};

range(0, 10).each { |i|
    printf("B%-2d = %s\n", i, bernoulli_number(i));
};
