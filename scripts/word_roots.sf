#!/usr/bin/ruby

# Author: Daniel "Trizen" È˜uteu
# License: GPLv3
# Date: 11th September 2014
# http://github.com/trizen

# Find the minimum word derivations for a list of words

func make_tree(fh) {

    var table = Hash.new;
    while(fh.readline(\var word)) {
        var ref = table;
        word.trim_end!.each { |char|
            ref = (ref[char] \\= Hash.new);
        };
        ref[word] = nil;
    }

    return table;
}

func traverse(code, hash) {
    var keys = hash.keys.sort -> each { |key|

        var child = hash[key] -> is_a(nil) ? ()
                                           : __FUNC__(code, child);

        if (keys.len > 1) {

            var count = 0;
            var ref = (var val = hash.delete(key)) -> is_a(nil) && next;

            while (true) {
                var key = ref.keys[0]  -> is_a(nil) && break;
                ref = (val = ref[key]) -> is_a(nil) && (
                    code.call(key.substr(0, key.len - count));
                    break;
                );
                count++;
            }
        }
    }
}

#
## Tests
#
var tree = make_tree(ARGV.len > 0 ? ARGV[0].to_file.open_r : DATA);

var abrv_words = [];
traverse(func(word) { say word; abrv_words.append(word) }, tree);

if (ARGV.len == 0) {
    abrv_words == ['deca', 'decora', 'deo', 'j', 'pla', 'plecar', 'plecat'] || "Error!".die;
}

__DATA__
deodorant
decor
decorat
decadere
plecare
placere
plecat
jaguar
