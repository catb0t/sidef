#!/usr/bin/ruby

class Hello(arr is Array) {
    arr.each { |name|
        say "** Creating a class method: #{name}";
        def_method name { name };
    };
    method add_method(name) {
        say "** Creating an instance method: #{name}";
        def_method name { name };
    };
    method add_method_with_arg(name) {
        say "** Creating an instance method with arguments: #{name}";
        def_method name (a){ a + name };
    };
    method add_block_method(name, block) {
        say "** Creating an instance method with a block: #{name}";
        self.def_method(name, block.copy);
    };
    method add_class_method(name) {
        say "** Creating a non-instance class method: #{name}";
        __CLASS__.def_method(name, { name }.copy);
    };
}
#
## Object 1
#
var obj = Hello(['foo', 'bar']);

assert_eq(obj.foo, "foo");
obj.add_method('baz');
obj.add_class_method('zoo');
assert_eq(obj.baz, "baz");
obj.baz;

var name = "zoro";
obj.add_block_method(name, { name });
assert_eq(obj.zoro, name);

#
## Object 2
#
var obj2 = Hello();
assert_eq(obj2.foo, "foo");

if (obj2.respond_to('baz')) {
    die "error";
};

assert_eq(obj2.zoo, "zoo");
assert_eq(obj.baz, "baz");
assert_eq(obj.foo, "foo");

obj.add_method('fox');
assert_eq(obj.fox, 'fox');

obj.def_method('foo', {'bar'});
assert_eq(obj.foo, 'bar');
assert_eq(obj2.foo, 'foo');

obj.add_method_with_arg('bau');
assert_eq(obj.bau('~'), "~bau");

obj2.add_method_with_arg('boo');
assert_eq(obj2.boo('-'), "-boo");
assert_eq(obj.bau('/'), "/bau");

obj2.add_method_with_arg('bau');
obj.add_method('bau');

assert_eq(obj2.bau('~'), '~bau');
assert_eq(obj.bau, 'bau');
