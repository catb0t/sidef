#!/usr/bin/ruby

# Translation of: http://rosettacode.org/wiki/Anagrams/Deranged_anagrams#Perl

func find_deranged (a) {

    for (a.range => \var i) {
        for (i+1 .. (a.offset) => \var j) {
            a[i] ^ a[j] -> contains("\0") && next;
            "length %d: %s => %s\n".printf(a[i].len, a[i], a[j]);
            return true;
        }
    }

    return false;
}

func main () {

    var lwp = (
        try   { require 'LWP::Simple'->() }
        catch { Sys.warn("** LWP::Simple is not installed!\n"); return }
    );

    "** Retrieving the wordlist...".say;

    var words = (Str.new(lwp.get('http://www.puzzlers.org/pub/wordlists/unixdict.txt')).split);

    "** Processing the words...".say;

    var time = Time.now;
    var letter_list = Hash.new;

    for (words) {
        # store anagrams in hash table by letters they contain
        letter_list[_.split('').sort.join] := [] -> append(_);
    }

    "** The hashing took %d seconds!\n".printf(Time.now - time);

    for ( letter_list.keys
         .grep {letter_list[_].len > 1}      # take only ones with anagrams
         .map  {[_, _.len]}
         .sort {|a,b| b[1] <=> a[1]}         # sort by length, descending
         .map  {_[0]}
        ) {

        # if we find a pair, they are the longested due to the sort before
        find_deranged(letter_list[_]) && (
            "** The process took %d seconds!\n".printf(Time.now - time);
            break;
        );
    }
}

main();
