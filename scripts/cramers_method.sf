#!/usr/bin/perl

# Liniar ecuations solver - Cramer's method.

# Example:
# | 2x - 3y +  z =  4
# |  x - 2y - 2z = -6
# | 3x - 4y +  z =  5

var matrix = [
    [2, -3,  1],
    [1, -2, -2],
    [3, -4,  1],
];

var free_terms = [4, -6, 5];

func diag_multiply_sum (matrix, left) {

    var range    = (matrix[0].range);   # range from 0 to len(matrix[0])-1
    var products = (Array.new);         # 'Array.new' is the same thing as '[]'

    for (left ? (range.reversed) : (range)) {

        var x = 0;
        var nums = [];
        var rangex = (_ .. (matrix[0].offset + _));     # range from i to len(matrix[0])-1+i

        (left ? (rangex.reversed) : rangex).map {
            nums.push(matrix[_][x]); x++;
        }

        products.push(nums.multiply);       # appending the product of 'nums' inside the 'products' array
    }

    "sum %s\n".printf(products.dump);
    return(products.sum);
}

func make_det_matrix (matrix) {
    matrix + (matrix[0 .. (matrix.offset - 1)]);
}

func calculate_delta (opts) {   # 'opts' is an HASH

    var matrix     = (opts['matrix'].map { _ + [] } );      # making a copy of the matrix
    var free_terms = (opts['free_terms']);
    var position   = (opts['position']);

    {
        matrix[_][position] = free_terms[_];    # substituiting the 'pos' column with the free terms
    } for (free_terms.range);

    var det_matrix = (make_det_matrix(matrix));
    var right      = (diag_multiply_sum(det_matrix, false));
    var left       = (diag_multiply_sum(det_matrix, true));

    var diff = (right - left);
    "%d - %d == %d\n\n".printf(right, left, diff);

    return(diff);
}

var det_matrix = (make_det_matrix(matrix));

var right = (diag_multiply_sum(det_matrix, false));
var left  = (diag_multiply_sum(det_matrix, true));

var delta = (right - left);
"%d - %d == %d\n\n".printf(right, left, delta);

"Delta == %s\n\n".printf(delta);

var xyz = (Array.new);
{
    var i = _;
    xyz[i] = (
      calculate_delta(
                      :{    # it's an HASH (notice the ':')
                        'matrix'     => matrix,
                        'free_terms' => free_terms,
                        'position'   => i,
                      }
                     )
                )
} for (free_terms.range);

var indices = [
    ['X', 0],
    ['Y', 1],
    ['Z', 2],
];

indices.map {
    var i = _[1];
    "Delta %s: %d\n".printf(_[0], xyz[i]);
}

"\n".print;

indices.map {
    var i = _[1];
    "%s == %3d/%-3d == %3s\n"
        printf(_[0], xyz[i], delta, xyz[i] / delta);
}
