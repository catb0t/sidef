#!/usr/bin/ruby

#
## http://rosettacode.org/wiki/Faulhaber%27s_formula
#

func bernoulli_number((1))       { 1/2 }
func bernoulli_number({.is_odd}) { 0 }

func bernoulli_number(n) {

    var a = [];
    0.to(n).each { |m|
        a[m] = 1/(m + 1)
        m.downto(1).each { |j|
            a[j-1] = j*(a[j-1] - a[j])
        }
    }

    return a[0]
}

func faulhaber_s_formula(p) {

    var formula = gather {
        0.to(p).each { |j|
            take "(#{binomial(p+1, j) * bernoulli_number(j) -> as_rat})*n^#{p+1 - j}"
        }
    }

    formula.grep! { !.match(/\(0\)\*/) }.join!(' + ')

    formula -= /\(1\)\*/g
    formula -= /\^1\b/g

    "1/#{p + 1} * (#{formula})"
}

0.to(9).each { |i|
    printf("f(%d) = %s\n", i, faulhaber_s_formula(i))
}
