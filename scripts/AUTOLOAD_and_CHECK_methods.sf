#!/usr/bin/ruby

class Store(products) {

    # buy method -- buy a product
    method buy(product) {
        say "You bought: #{product}";
        return self.products[product]['price'];
    }

    # return method -- return a product
    method return(product) {
        say "You returned: #{product}";
        return self.products[product]['rprice'];
    }

    # CHECK method -- this method is called before calling the real methods
    method CHECK(action, product) {
        self.products.exists(product) || (
            say "We don't have this product: #{product}";
            return false;
        );

        if (action == 'buy') {
            self.products[product]['stock'] > 0  || (
                say "Stock of product '#{product}' is empty.";
                return false;
            );
        }

        return true;
    }

    # AUTOLOAD method -- this method is called when a method is not defined
    method AUTOLOAD(action, product) {
        say "You may not '#{action}' product '#{product}'";
        return;
    }
};

# A list of products
var products = :(
    milk => :(price => 1, stock => 1, rprice => 3),
    beer => :(price => 2, stock => 0, rprice => 2),
    soda => :(price => 3, stock => 2, rprice => 1),
);

# Init the store (with products)
var store = Store(products);

store.buy('milk')    == 1   || "error".die;           # prints: "You bought: milk"
store.buy('beer')    == nil || "error".die;           # prints: "Stock of product 'beer' is empty."
store.return('milk') == 3   || "error".die;           # prints: "You returned: milk"
store.buy('wine')    == nil || "error".die;           # prints: "We don't have this product: wine"
store.steal('soda')  == nil || "error".die;           # prints: "You may not 'steal' product 'soda'"
