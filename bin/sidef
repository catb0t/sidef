#!/usr/bin/perl

use utf8;
use 5.014;

BEGIN {    # support for running sidef locally from everywhere
    require File::Spec;
    require File::Basename;
    unshift @INC,
      File::Spec->catdir(
                         File::Basename::dirname(
                                                   File::Spec->file_name_is_absolute(__FILE__)
                                                 ? __FILE__
                                                 : File::Spec->rel2abs(__FILE__)
                                                ),
                         File::Spec->updir,
                         'lib'
                        );
}

binmode STDIN,  ":utf8";
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8" if $^P == 0;    # to work under Devel::* modules

require Sidef;

my $name    = 'Sidef';
my $version = $Sidef::VERSION;

my %args;
if ($#ARGV != -1 and chr ord $ARGV[0] eq '-') {
    require Getopt::Std;
    Getopt::Std::getopts('e:E:d:Dho:ivHN:n:WwcM:rR:StO:', \%args);
}

# Help
if (defined $args{h}) {
    output_usage();
    exit 0;
}

# Version
if (defined $args{v}) {
    output_version();
    exit 0;
}

# Warnings
if (defined $args{w}) {
    $SIG{__DIE__} = $SIG{__WARN__} = sub {
        require Carp;
        Carp::cluck(@_);
    };
}
elsif (defined $args{W}) {
    $SIG{__DIE__} = $SIG{__WARN__} = sub {
        require Carp;
        Carp::confess(@_);
    };
}

# Number types
if (defined(my $type = $args{N})) {
    load_numbers($type);
}

# Backend for Math::BigInt
if (defined(my $type = $args{n})) {
    load_math_backend($type);
}

# Memoization
if (defined(my $types = $args{M})) {
    memoize_types($types);
}

# Code from a dumped parse-tree
if (defined $args{d}) {
    my $struct = do($args{d})
      || die "Can't load the data structure from file '$args{d}': $!\n";
    execute_struct($struct);
}

# Interactive help
elsif (defined $args{H}) {
    help_interactive();
}

# Interactive coding
elsif (defined $args{i}) {
    code_interactive();
}

# Test mode
elsif (defined $args{t}) {
    my @argv = splice(@ARGV);
    while (defined(my $script_name = shift @argv)) {

        say "\n** Executing: $script_name";
        say "-" x 80;

        splice(@Sidef::Exec::NAMESPACES);
        my $exec   = Sidef::Exec->new();
        my $code   = read_script($script_name);
        my $parser = new_parser(name => $script_name);
        my $struct = parse_code($parser, $code);
        eval { $exec->execute($struct) };

        if ($@) {
            warn "[ERROR] Error encountered on script `$script_name': $@\n";
            sleep 2;
        }

        if (@argv) {
            unload_numbers();
            load_numbers($args{N} // 'float');
            load_math_backend($args{n}) if defined($args{n});
        }
    }
}

# Default
else {
    my $script_name = '-';
    $args{E} = $args{e} if exists($args{e});
    my $code = exists($args{E})
      ? do {
        defined($args{E}) || die "No code specified for -E.\n";
        $script_name = '-E';
        require Encode;
        Encode::decode_utf8($args{E});
      }
      : defined($ARGV[0]) && (-t STDIN or -f $ARGV[0]) ? do {
        $script_name = shift @ARGV;
        read_script($script_name);
      }
      : do { local $/; <STDIN> };

    $code // exit 2;
    my $parser = new_parser(name => $script_name);
    my $struct = parse_code($parser, $code);

    # Dump the data structure
    if (defined $args{D}) {
        dump_structure($struct);
    }

    # Deparse code
    elsif (defined($args{r}) or defined($args{R})) {
        deparse_structure($struct);
    }

    # Compile the struct to a Perl program
    elsif (defined $args{c}) {
        compile_to_perl($struct);
    }

    # Execute the struct
    else {
        execute_struct($struct);
    }
}

#
## Subroutines
#

sub read_script {
    my ($script_name) = @_;
    open my $fh, '<:utf8', $script_name
      or die qq{Can't open sidef script "$script_name": $!\n};
    local $/;
    <$fh>;
}

sub new_parser {
    my (%opt) = @_;
    Sidef::Parser->new(
                       file_name   => $opt{name},
                       script_name => $opt{name},
                       strict      => !$args{S},
                      );
}

sub optimize_struct {
    my ($struct) = @_;

    my $optimizer  = Sidef::Optimizer->new;
    my %opt_struct = $optimizer->optimize($struct);

    return \%opt_struct;
}

sub parse_code {
    my ($parser, $code) = @_;

    my $struct = $parser->parse_script(code => $code);

    # Check for optimization
    if (defined($args{O})) {
        if ($args{O} >= 1) {
            $struct = optimize_struct($struct);
        }
    }

    return $struct;
}

sub load_numbers {
    my ($type) = @_;

    require Sidef::Types::Number::Number;
    if ($type eq 'fast' or $type eq 'perl') {
        require Sidef::Types::Number::NumberFast;
    }
    elsif ($type eq 'rat') {
        require Sidef::Types::Number::NumberRat;
    }
    elsif ($type eq 'int') {
        require Sidef::Types::Number::NumberInt;
    }
    elsif ($type eq 'big' or $type eq 'float') {
        ## default
    }
    else {
        die "Invalid value '${type}' for option '-N'!";
    }
}

sub load_math_backend {
    my ($type) = @_;

    require Math::BigInt;
    Math::BigInt->import(lib => $type);
}

sub unload_numbers {
    delete @INC{
        qw(
          Math/BigInt.pm
          Math/BigFloat.pm
          Math/BigRat.pm
          Sidef/Types/Number/Number.pm
          Sidef/Types/Number/NumberInt.pm
          Sidef/Types/Number/NumberFast.pm
          Sidef/Types/Number/NumberRat.pm
          )
    };
}

sub execute_struct {
    my ($struct) = @_;
    Sidef::Types::Block::Code->new($struct)->run;
}

sub output_usage {
    my %switches = (
                    '-i'             => 'interactive mode',
                    '-c'             => 'compile the code as a stand-alone perl program',
                    '-d dumped_file' => 'execute a syntax tree dumped file',
                    '-D'             => 'dump the syntax tree of a program',
                    '-o output_file' => 'file where to dump the output',
                    '-E program'     => 'one line of program',
                    '-H'             => 'interactive help',
                    '-N type'        => ['use a specific implementation for numbers', 'valid types: fast, big, int, rat'],
                    '-n type'        => ['try to use a specific backend for Math::BigInt', 'valid types: GMP, Pari, FastCalc'],
                    '-M type,type'   => ['memoize some expensive method calls', 'valid types: num, block, all'],
                    '-O level'       => ['optimize the syntax-tree of a program', 'valid optimization levels: 0, 1'],
                    '-S'             => 'disable strictures and ignore any errors',
                    '-v'             => 'print version number and exit',
                    '-t'             => 'treat all command-line arguments as scripts',
                    '-r'             => 'deparse a Sidef program',
                    '-R lang'        => ['deparse a Sidef program to a given language', 'valid values: sidef'],
                    '-w'             => 'enable warnings with stack backtrace',
                    '-W'             => 'make warnings fatal (with stack backtrace)',
                   );

    require File::Basename;
    my $basename = File::Basename::basename($0);

    print <<"USAGE";

Usage: $basename [switches] [--] [programfile] [arguments]

USAGE

    require List::Util;
    my $max_width = List::Util::max(map { length } keys %switches);
    $max_width += 4;

    foreach my $key (sort { lc($a) cmp lc($b) or lc($b) cmp lc($a) or $b cmp $a } keys %switches) {
        if (ref $switches{$key} eq 'ARRAY') {
            printf "  %-${max_width}s%s\n", $key, $switches{$key}[0];
            foreach my $i (1 .. $#{$switches{$key}}) {
                printf "  %-${max_width}s%s\n", '', $switches{$key}[$i];
            }
        }
        else {
            printf "  %-${max_width}s%s\n", $key, $switches{$key};
        }
    }

    print <<"END";

Run '$basename -H' for interactive help.

END
}

sub output_version {
    print "$name $version\n";
}

sub help_interactive {

    require File::Basename;
    require File::Spec;

    my %keywords = (
                    if   => 'Sidef::Types::Bool::If',
                    '\\' => 'Sidef::Variable::Ref',
                    '*'  => 'Sidef::Variable::Ref',
                   );

    require Term::ReadLine;
    my $term = Term::ReadLine->new("$name $version -- help interactive mode");

    print <<"HELP";
Welcome to $name $version!  This is the interactive help utility.

Enter the name of any object, keyword, or topic to get help on writing
$name programs and using $name modules.  To quit this help utility, just
type "quit".

HELP

    {
        my $line = $term->readline('help> ') // do { print "\n"; return };

        if ($line eq 'quit' or $line eq 'q') {
            return;
        }

        my $parser = new_parser(name => '-H');
        $parser->{interactive} = 1;
        my $struct = eval { $parser->parse_script(code => $line) };

        if ($@) {
            warn $@;
            redo;
        }

        my @refs = exists($keywords{$line}) ? $keywords{$line} : (map { ref($_) } eval { execute_struct($struct) });

        foreach my $ref (@refs) {
            $ref eq '' && do { warn "Not an object!\n"; next };
            my $name = $ref =~ s{::}{/}gr;
            my $file = $INC{$name . '.pm'};
            my $pod;
            foreach my $dir (@INC) {
                if (-e (my $f = File::Spec->catfile($dir, $name . '.pod'))) {
                    $pod = $f;
                    last;
                }
            }
            system 'perldoc', defined($pod) ? $pod : $ref;
        }

        redo;
    }
}

sub code_interactive {
    require Term::ReadLine;
    my $term = Term::ReadLine->new("$name $version -- interactive mode");

    my $exec = Sidef::Exec->new;
    my $parser = new_parser(name => '-i');
    $parser->{interactive} = 1;

    print qq{$name $version on $^O\n};
    print qq{Type "help", "copyright" or "license" for more information.\n};

    my $last_line = '';
    {
        my $line = do {
            @ARGV
              ? do {
                my $file = shift(@ARGV);
                open my $fh, '<:utf8', $file or do {
                    warn "Can't open file `$file': $!\n";
                    next;
                };
                local $/;
                <$fh>;
              }
              : (
                $term->readline('>>> ')
                  // do { print "\n"; exit }
                );
        };

        if ($line eq 'help') {
            help_interactive();
            redo;
        }
        elsif ($line eq '^') {
            say $last_line;
            redo;
        }
        elsif ($line eq '&') {
            $line = $last_line;
        }
        elsif ($line eq 'q' or $line eq 'quit') {
            exit;
        }
        elsif ($line eq 'copyright') {
            print <<'EOT';
Copyright © 2013 Daniel Șuteu, Ioana Fălcușan
Copyright © 2014-2015 Daniel Șuteu
All Rights Reserved.
EOT
            redo;
        }
        elsif ($line eq 'license') {
            print <<'EOT';

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

EOT
            redo;
        }

        $last_line = $line;

        my $struct = eval { $parser->parse_script(code => $line) };

        $@ && do {
            warn $@;
            $parser = new_parser(name => '-i');
            $parser->{interactive} = 1;
            redo;
        };

        say ref($_) ne 'Sidef::Types::Block::Code' && eval { $_->can('dump') } ? $_->dump : $_
          for eval { $exec->execute($struct) };
        redo;
    }
}

sub _get_namespaces {
    @Sidef::Exec::NAMESPACES
      ? ('push(@Sidef::Exec::NAMESPACES, ' . join(', ', map { qq{"\Q$_\E"} } @Sidef::Exec::NAMESPACES) . ");\n")
      : '';
}

sub _get_number_type {
    my $code = "use Math::BigFloat;\n";

    if (defined(my $type = $args{N})) {
        if ($type eq 'fast' or $type eq 'perl') {
            $code .= "require Sidef::Types::Number::NumberFast;\n";
        }
        elsif ($type eq 'rat') {
            $code .= "require Sidef::Types::Number::NumberRat;\n";
        }
        elsif ($type eq 'int') {
            $code .= "require Sidef::Types::Number::NumberInt;\n";
        }
    }
    $code;
}

sub _get_loaded_modules {
    my $modules = '';
    foreach my $key (sort { length($a) <=> length($b) || $a cmp $b } keys %INC) {
        if ($key =~ /^Sidef\b/) {
            $modules .= "require '$key';\n";
        }
    }
    $modules;
}

sub deparse_structure {
    my ($struct) = @_;

    my $lang = defined($args{R}) ? $args{R} : 'Sidef';

    my $module = "Sidef::Deparse::\u\L$lang";
    my $pm     = ($module =~ s{::}{/}gr . '.pm');
    require $pm;
    my $deparser = $module->new(namespaces => [@Sidef::Exec::NAMESPACES],);
    my @statements = $deparser->deparse($struct);

    my $out_fh = \*STDOUT;

    if (defined $args{o}) {
        open $out_fh, '>:utf8', $args{o}
          or die "Can't open file '$args{o}' for write: $!\n";
    }

    print {$out_fh} $deparser->{before} . join($deparser->{between}, @statements) . $deparser->{after};
}

sub dump_structure {
    my ($struct) = @_;

    eval { require Data::Dump };

    if ($@) {
        die "Data::Dump module is not installed!\n";
    }
    else {
        my $out_fh = \*STDOUT;

        if (defined $args{o}) {
            open $out_fh, '>:utf8', $args{o}
              or die "Can't open file '$args{o}' for write: $!\n";
        }
        print {$out_fh} _get_namespaces();
        print {$out_fh} _get_number_type();
        print {$out_fh} _get_loaded_modules();
        print {$out_fh} Data::Dump::pp($struct);
    }
}

sub memoize_types {
    my ($types) = @_;

    my @types =
      $types eq 'all'
      ? ()
      : split(/\s*,\s*/, $types);

    my %known_types;
    {
        no strict 'refs';

        # Init
        $known_types{_init_} = sub {
            require Memoize;

            require Sidef::Convert::Convert;
            my $package = 'Sidef::Convert::Convert';
            foreach my $method (
                                qw(
                                stringify
                                )
              ) {
                Memoize::memoize($package . '::' . $method);
            }
        };

        # Number methods
        $known_types{num} = sub {
            require Sidef::Types::Number::Number;
            my $package = 'Sidef::Types::Number::Number';

            my %ignore;
            @ignore{
                qw(
                  ISA
                  BEGIN
                  get_value
                  GET_PERL_VALUE
                  )
            } = ();

            foreach my $method (keys %{$package . '::'}) {
                next if exists $ignore{$method};
                Memoize::memoize($package . '::' . $method);
            }
        };

        # Block methods
        $known_types{block} = sub {
            require Sidef::Types::Block::Code;
            my $package = 'Sidef::Types::Block::Code';
            foreach my $method ('call') {
                Memoize::memoize($package . '::' . $method);
            }
        };
    }

    # Get the valid types
    my @valid_types = @types
      ? (
        grep {
            exists $known_types{$_} || do {
                die "Invalid value '$_' for option '-M'!";
                0;
              }
          } @types
        )
      : (grep { $_ ne '_init_' } keys %known_types);

    # Init only if we have some valid types
    if (@valid_types) {
        $known_types{_init_}->();
    }

    # Memoize each category
    foreach my $type (@valid_types) {
        $known_types{$type}->();
    }
}

sub compile_to_perl {
    my ($struct) = @_;

    eval { require Data::Dump };

    if ($@) {
        die "Data::Dump module is not installed!";
    }
    else {
        require File::Basename;
        my $path = File::Basename::dirname($INC{'Sidef.pm'});

        my $package_content = <<"HEAD";
#!$^X

eval 'exec $^X  -S \$0 \${1+"\$@"}'
    if 0; # not running under some shell

use utf8;
use 5.014;
use warnings;

# For `inf` and `nan` barewords
no strict 'subs';
no warnings 'reserved', 'once';

use File::Temp qw(tempdir);
use File::Path qw(make_path);
use File::Spec::Functions qw(catdir catfile);

my \$DIR;
use lib \$DIR = tempdir(CLEANUP => 1);

binmode STDIN,  ":utf8";
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8" if \$^P == 0;    # to work under Devel::* modules

foreach my \$mod (
HEAD

        require File::Find;
        File::Find::find(
            {
             no_chdir => 1,
             wanted   => sub {
                 if (/\.pm\z/ and -f) {

                     local $/;
                     open my $fh, '<:utf8', $_
                       or die "Can't open file `$_' for reading: $!";

                     my $token = tr/A-Za-z0-9/_/cr;

                     $package_content .= qq{<<'${token}',\n};
                     $package_content .= <$fh>;
                     $package_content .= "\n$token\n";

                     close $fh;
                 }
             }
            } => $path
        );

        $package_content .= <<"FOOT";
) {
    if (\$mod =~ /^(?>##\\h*)?package\\h+([\\w:]+)/) {
        my \@parts = split(/::/, \$1);

        my \$name = pop \@parts;
        my \$dir = catdir(\$DIR, \@parts);

        if (\$#parts != -1 and not -d \$dir) {
            make_path(\$dir)
                or die qq{ERROR: Can't create directory "\$dir": \$!};
        }

        my \$filename = catfile(\$dir, \$name . '.pm');

        open my \$fh, '>:utf8', \$filename
            or die qq{ERROR: Can't create file "\$filename": \$!};

        print {\$fh} \$mod;

        close \$fh
            or die qq{ERROR: Can't close file "\$filename": \$!};
    }
    else {
        die qq{ERROR: can't get the package name!};
    }
}

FOOT

        $package_content .= _get_number_type();
        $package_content .= _get_loaded_modules();

        my $out_fh = \*STDOUT;

        if (defined $args{o}) {
            open $out_fh, '>:utf8', $args{o}
              or die "Can't open file '$args{o}' for write: $!";
        }

        print {$out_fh} $package_content;

        print {$out_fh} _get_namespaces;
        print {$out_fh} "\nmy \$struct = ";
        print {$out_fh} Data::Dump::pp($struct);
        print {$out_fh} ";\n";

        print {$out_fh} <<"EXEC";

#
## Execute the data structure
#

Sidef::Exec->new->execute(\$struct);
EXEC
    }
}
